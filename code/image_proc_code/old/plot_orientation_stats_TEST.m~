%% get the orientation content of a subset of the images from ImageNET database
% making sure that our image set rotations affected the prior in the
% expected way (peak at cardinals, or cardinals+rotation)
%%

clear
close all

% if isempty(gcp('nocreate'))
%     parpool(8);
% end

% rot_list = [45];
rot_list = [0,22,45];

root = pwd;
filesepinds = find(root==filesep);
root = root(1:filesepinds(end-1));

% image_path = fullfile(root,'images','ImageNet','ILSVRC2012');
save_path = fullfile(root,'image_stats','ImageNet','ILSVRC2012');

% how big are the images when we do our analysis? this is the same
% as the size that VGG-16 preprocesing resizes them to, after crop.
process_at_size = 224;

% set an amount of downsampling, for speed of processing
resize_factor = 1;  % if one then using actual size

%% specify the spatial frequencies and orientations to filter at

freq_list = logspace(log10(0.02), log10(.2),4);
[wavelength_list,sorder] = sort(1./freq_list,'ascend');
freq_list = freq_list(sorder);

ori_list = 5:5:180;

%     all_im_fns = [];
R_MEAN = 124;
G_MEAN = 117;
B_MEAN = 104;

%% make the filter bank (will be same for all images we look at)
% 
% fprintf('making filters...\n')
% tic
% 
% GaborBank = gabor(wavelength_list.*resize_factor,ori_list);
% freq_inds = repelem(1:length(freq_list),numel(ori_list));
% sizeLargestKernel = size(GaborBank(end).SpatialKernel);
% % Gabor always returns odd length kernels
% padding_needed = (sizeLargestKernel-1)/2;
% 
% max_pix = process_at_size;  % maximum size of any image dimension
% % FIX this so that we can make the filters ahead of time
% size_after_pad = max_pix*resize_factor+padding_needed*2;
% size_after_pad = size_after_pad + mod(size_after_pad,2);
% % making a matrix [nPix x nPix x nFilters]
% filters_freq = zeros([size_after_pad,length(GaborBank)]);
% 
% for p = 1:length(GaborBank)
% 
%     H = makeFrequencyDomainTransferFunction_MMH(GaborBank(p),size_after_pad);
%     filters_freq(:,:,p) = ifftshift(H);
% 
% end
% toc
% 
% ff=1;
% ii=1;

nIms2Do = 2;
mag_by_ori = zeros(length(rot_list),nIms2Do,length(ori_list));

%% now loop over the three different training sets
for rr = 1:length(rot_list)
    
    
%     % find all the folders in this directory
%     image_folders = dir(fullfile(image_path, sprintf('train_rot_%d',rot_list(rr)),'n*'));
    
    folder2save = fullfile(save_path, sprintf('ImageStats_train_rot_%d',rot_list(rr)));
    if ~isfolder(folder2save)
        mkdir(folder2save)
    end
%     
%     nIms = zeros(length(image_folders),1);
%     total_time = zeros(length(image_folders),6);
    
    %% loop over folders and images
%     for ff=1:length(image_folders)
    ff=1;

%         fprintf('processing folder %d of %d\n',ff,length(image_folders));
        
    fn2save = fullfile(folder2save,sprintf('%s_allstats_highdensity.mat',image_folders(ff).name));  
    load(fn2save);



    mean_mag = reshape([image_stats.mag],length(freq_list),length(ori_list),numel(image_stats));

%             mean_mag = reshape(squeeze(mean(mean(mag,2),1)), length(freq_list),length(ori_list));

    mag_by_ori(rr,:,:) = mean(mean_mag(:,:,1:nIms2Do),1);

end

%%
for ii=1:nIms2Do
    
figure;hold all;
plot(ori_list,squeeze(mag_by_ori(:,ii,:)));
% legend(rot_list);

end
